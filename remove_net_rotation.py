import sys
import os.path
import math
import pygplates


# # Check the required pygplates version.
# # Need the bug fix for crash writing out rotation features to '.rot' files.
# PYGPLATES_VERSION_REQUIRED = pygplates.Version(20)
# # Check the imported pygplates version.
# if not hasattr(pygplates, 'Version') or pygplates.Version.get_imported_version() < PYGPLATES_VERSION_REQUIRED:
#     raise RuntimeError('{0}: Error - imported pygplates version {1} but version {2} or greater is required'.format(
#             os.path.basename(__file__), pygplates.Version.get_imported_version(), PYGPLATES_VERSION_REQUIRED))


#
# Script to remove net rotation from a rotation file.
#

# The main directory is the directory containing this source file.
base_dir = os.path.abspath(os.path.dirname(__file__))

# Data sub-directory.
data_dir = os.path.join(base_dir, 'data')

rotation_filename = os.path.join(data_dir, 'Global_EarthByte_230-0Ma_GK07_AREPS.rot')
nnr_rotation_filename = os.path.join(data_dir, 'Global_EarthByte_230-0Ma_GK07_AREPS_NNR2.rot')

# net_stage_rotation_interval = 10
# net_stage_pole_data = [
#     (230, -12.876, 161.064, 0.106018     ),
#     (220, 6.44506, -99.2005, 0.210344    ),
#     (210, 7.47756, -101.467, 0.263705    ),
#     (200, 3.91095, -107.254, 0.31531     ),
#     (190, 4.60476, -177.216, 0.304054    ),
#     (180, -8.86242, 110.454, 0.0742011   ),
#     (170, -13.751, 59.5681, 0.339836     ),
#     (160, -14.3206, 110.991, 0.17593     ),
#     (150, 12.6728, 133.79, 0.206295      ),
#     (140, -29.6835, -22.2692, 0.257134   ),
#     (130, -38.2763, -14.5914, 0.197295   ),
#     (120, -79.9333, 44.9839, 0.210802    ),
#     (110, -61.8724, 157.771, 0.205893    ),
#     (100, -14.4632, 170.454, 0.197388    ),
#     (90, -9.50488, 127.643, 0.192914     ),
#     (80, -15.1639, 114.874, 0.202884     ),
#     (70, -20.3742, 46.1005, 0.0629387    ),
#     (60, 4.39409, 80.8206, 0.232849      ),
#     (50, -33.3891, 110.667, 0.147159     ),
#     (40, -14.8551, 80.3278, 0.0727454    ),
#     (30, -44.1182, 50.3136, 0.142597     ),
#     (20, -42.3818, 13.4825, 0.164551     ),
#     (10, -36.4544, 30.9531, 0.195274     )
# ]

net_stage_rotation_interval = 1
net_stage_pole_data = [
    (230,-11.711,157.245,0.105269        ),
    (229,-11.9997,158.894,0.105892       ),
    (228,-12.1346,160.55,0.106479        ),
    (227,-12.4197,162.225,0.107464       ),
    (226,-12.4883,163.734,0.107979       ),
    (225,-12.5794,165.277,0.108857       ),
    (224,-12.6301,166.769,0.10967        ),
    (223,-12.7393,168.231,0.110521       ),
    (222,-12.6151,169.601,0.111398       ),
    (221,-12.4939,171.072,0.112357       ),
    (220,6.91997,-97.0691,0.202572       ),
    (219,6.85691,-97.4576,0.206113       ),
    (218,6.84583,-97.821,0.209443        ),
    (217,6.86721,-98.107,0.212706        ),
    (216,6.8532,-98.4233,0.216173        ),
    (215,6.78833,-98.7312,0.219538       ),
    (214,6.82438,-99.0157,0.222712       ),
    (213,6.89158,-99.2486,0.225973       ),
    (212,6.97918,-99.4956,0.229281       ),
    (211,6.98152,-99.7433,0.232456       ),
    (210,7.54111,-99.7642,0.255429       ),
    (209,7.55112,-99.9847,0.259229       ),
    (208,7.56749,-100.296,0.262772       ),
    (207,7.62884,-100.645,0.266146       ),
    (206,7.69364,-100.927,0.269753       ),
    (205,7.67765,-101.198,0.273309       ),
    (204,7.73677,-101.474,0.27672        ),
    (203,7.80043,-101.734,0.280242       ),
    (202,7.92287,-101.921,0.283725       ),
    (201,7.98039,-102.154,0.286964       ),
    (200,3.57176,-107.913,0.312798       ),
    (199,3.80404,-107.989,0.314632       ),
    (198,3.99511,-108.085,0.31635        ),
    (197,4.24482,-108.128,0.318286       ),
    (196,4.47008,-108.144,0.320114       ),
    (195,5.46954,-106.446,0.309709       ),
    (194,5.70603,-106.502,0.311474       ),
    (193,5.90317,-106.519,0.313272       ),
    (192,6.13222,-106.542,0.315105       ),
    (191,6.38936,-106.659,0.316837       ),
    (190,4.89864,-177.078,0.303649       ),
    (189,5.00791,-177.305,0.305092       ),
    (188,5.06665,-177.554,0.306723       ),
    (187,5.16761,-177.772,0.308384       ),
    (186,5.2199,-178.022,0.309874        ),
    (185,5.30284,-178.256,0.311652       ),
    (184,5.35483,-178.489,0.313065       ),
    (183,5.38013,-178.722,0.314883       ),
    (182,5.38515,-178.919,0.3165         ),
    (181,5.4435,-179.148,0.318305        ),
    (180,-19.9064,107.388,0.0541348      ),
    (179,-20.2419,108.219,0.0540738      ),
    (178,-20.475,108.788,0.0538872       ),
    (177,-6.38306,112.544,0.0829052      ),
    (176,-6.39443,113.162,0.0830506      ),
    (175,-6.31104,113.501,0.0831774      ),
    (174,-6.30923,114.004,0.0834302      ),
    (173,-6.23922,114.366,0.0834826      ),
    (172,-6.70079,114.477,0.0837021      ),
    (171,-6.92479,114.801,0.0839489      ),
    (170,-12.1864,59.1259,0.37608        ),
    (169,-12.2489,59.1195,0.377216       ),
    (168,-9.14256,50.4954,0.360074       ),
    (167,-9.25191,50.5746,0.360859       ),
    (166,-9.41811,50.6503,0.361456       ),
    (165,-15.5123,61.1846,0.328724       ),
    (164,-18.2035,66.6423,0.320211       ),
    (163,-18.2219,66.831,0.321609        ),
    (162,-18.2689,67.0313,0.323079       ),
    (161,-18.3133,67.2618,0.32472        ),
    (160,2.39918,118.75,0.180998         ),
    (159,1.8083,118.759,0.183449         ),
    (158,0.875007,118.142,0.186378       ),
    (157,-0.185689,118.5,0.18874         ),
    (156,-15.8218,119.978,0.216201       ),
    (155,-15.6275,110.798,0.207308       ),
    (154,-26.3416,85.2898,0.183619       ),
    (153,-24.3196,80.4772,0.185625       ),
    (152,-25.285,81.3149,0.185795        ),
    (151,-26.8145,82.2889,0.186138       ),
    (150,11.6074,142.463,0.156274        ),
    (149,3.91407,143.17,0.168365         ),
    (148,2.24547,143.955,0.173889        ),
    (147,4.88791,132.519,0.208422        ),
    (146,9.71227,127.395,0.239168        ),
    (145,14.682,136.132,0.253747         ),
    (144,14.628,135.42,0.25513           ),
    (143,14.5956,134.617,0.250677        ),
    (142,14.3149,133.684,0.259898        ),
    (141,14.0751,134.004,0.26251         ),
    (140,-52.7973,-20.553,0.279138       ),
    (139,-54.0567,-18.6369,0.246944      ),
    (138,-22.4949,-23.4041,0.26308       ),
    (137,-20.6802,-26.3972,0.276122      ),
    (136,-21.6828,-28.2074,0.284643      ),
    (135,-22.4752,-26.3631,0.27967       ),
    (134,-22.9284,-26.4834,0.277034      ),
    (133,-25.9885,-24.4218,0.237137      ),
    (132,-31.582,-23.0068,0.214301       ),
    (131,-23.7727,-19.7839,0.21982       ),
    (130,-45.2731,-5.5196,0.192763       ),
    (129,-45.4519,-1.56083,0.188205      ),
    (128,-43.9039,-2.77225,0.228627      ),
    (127,-44.7297,-2.40864,0.231078      ),
    (126,-33.0138,-14.8311,0.203521      ),
    (125,-30.2679,-21.308,0.193763       ),
    (124,-34.328,-23.9611,0.198177       ),
    (123,-37.1665,-22.8351,0.189123      ),
    (122,-38.0707,-22.8603,0.187085      ),
    (121,-58.6771,-71.2813,0.154771      ),
    (120,-80.8975,38.8834,0.213598       ),
    (119,-80.7189,43.6054,0.215527       ),
    (118,-80.4697,48.1358,0.217362       ),
    (117,-79.9859,55.9435,0.21926        ),
    (116,-79.5072,58.0776,0.222793       ),
    (115,-81.4154,69.1828,0.222625       ),
    (114,-80.813,72.2481,0.224603        ),
    (113,-80.1961,74.4941,0.226435       ),
    (112,-79.4795,77.4057,0.228063       ),
    (111,-78.9835,78.9727,0.229588       ),
    (110,-84.2096,105.425,0.238255       ),
    (109,-83.3839,104.359,0.240136       ),
    (108,-82.8399,102.955,0.241357       ),
    (107,-77.696,111.508,0.254316        ),
    (106,-64.7665,118.401,0.318521       ),
    (105,-35.2874,171.239,0.213584       ),
    (104,-35.0808,171.352,0.213949       ),
    (103,-36.4661,172.629,0.202415       ),
    (102,-36.2513,172.798,0.202463       ),
    (101,-34.7232,173.411,0.200425       ),
    (100,-31.3866,-172.347,0.237859      ),
    (99,-32.4898,-178.757,0.237662       ),
    (98,-32.6289,-178.87,0.236508        ),
    (97,-31.5194,-173.018,0.233614       ),
    (96,-32.8443,-179.097,0.233334       ),
    (95,5.31374,151.781,0.195536         ),
    (94,5.28187,151.815,0.192509         ),
    (93,5.22202,151.87,0.189431          ),
    (92,5.2054,151.954,0.186635          ),
    (91,5.09475,152.029,0.183714         ),
    (90,5.80518,151.79,0.179288          ),
    (89,5.91528,152.182,0.17499          ),
    (88,5.80921,152.252,0.173076         ),
    (87,5.59281,152.33,0.170165          ),
    (86,-6.1782,140.448,0.18424          ),
    (85,-5.43943,139.567,0.186466        ),
    (84,-6.92822,139.575,0.18479         ),
    (83,-28.3542,101.431,0.250973        ),
    (82,-29.5552,101.346,0.245322        ),
    (81,-30.3282,101.566,0.239087        ),
    (80,-29.4549,107.434,0.249376        ),
    (79,-30.7425,116.567,0.296538        ),
    (78,-31.2978,117.121,0.291822        ),
    (77,-25.2153,117.057,0.235428        ),
    (76,7.78025,116.052,0.137446         ),
    (75,6.52156,116.884,0.132462         ),
    (74,0.512425,122.118,0.140288        ),
    (73,-5.10931,125.746,0.145424        ),
    (72,-4.21758,127.008,0.138536        ),
    (71,13.5535,121.877,0.104871         ),
    (70,-34.828,146.138,0.231292         ),
    (69,-34.5002,147.987,0.231282        ),
    (68,-40.639,68.2703,0.0593475        ),
    (67,1.88015,4.58693,0.097939         ),
    (66,1.74963,2.82525,0.0958744        ),
    (65,28.8214,1.41712,0.12346          ),
    (64,27.4363,-2.21419,0.120538        ),
    (63,23.4541,-2.21927,0.118174        ),
    (62,-2.91451,-5.61721,0.0922121      ),
    (61,-51.4612,-23.7576,0.133964       ),
    (60,-2.92107,87.8906,0.22538         ),
    (59,-2.68236,88.561,0.222928         ),
    (58,-4.24028,88.0422,0.219587        ),
    (57,2.7449,87.1289,0.215204          ),
    (56,16.2579,78.2512,0.26537          ),
    (55,18.8306,78.788,0.263528          ),
    (54,14.3519,76.1653,0.247649         ),
    (53,2.37708,70.2717,0.219637         ),
    (52,-4.13736,69.9575,0.207212        ),
    (51,-6.67097,70.2635,0.208427        ),
    (50,-1.43404,63.9016,0.171021        ),
    (49,2.7811,67.3494,0.168039          ),
    (48,-41.4554,121.664,0.159357        ),
    (47,-44.5598,128.485,0.174747        ),
    (46,-45.9653,129.717,0.184901        ),
    (45,-46.7377,120.806,0.182793        ),
    (44,-31.7054,124.308,0.15427         ),
    (43,-28.9781,127.978,0.163286        ),
    (42,-29.44,127.266,0.161864          ),
    (41,-3.39614,141.213,0.154522        ),
    (40,-29.4332,127.527,0.0606046       ),
    (39,-29.0658,124.439,0.0588484       ),
    (38,-10.4457,90.1056,0.0656873       ),
    (37,-10.5155,88.5544,0.0652173       ),
    (36,-11.0948,91.6624,0.0602583       ),
    (35,-29.742,103.55,0.067925          ),
    (34,-24.199,82.3215,0.0837261        ),
    (33,-8.38005,55.5462,0.117832        ),
    (32,-9.08066,55.6071,0.118011        ),
    (31,-14.1022,51.581,0.130478         ),
    (30,-12.0031,49.0878,0.122412        ),
    (29,-13.2825,50.4154,0.116723        ),
    (28,-15.6847,50.0249,0.11766         ),
    (27,-38.9268,53.8204,0.134872        ),
    (26,-50.7443,57.3965,0.164432        ),
    (25,-60.074,59.0939,0.158016         ),
    (24,-59.4828,58.5684,0.158127        ),
    (23,-54.9195,43.6449,0.157699        ),
    (22,-55.3673,43.9955,0.158141        ),
    (21,-54.4076,39.7747,0.157594        ),
    (20,-43.4585,10.5879,0.154023        ),
    (19,-43.6378,11.2489,0.153526        ),
    (18,-44.0559,11.1617,0.158907        ),
    (17,-43.5825,10.5244,0.160376        ),
    (16,-44.5236,11.1587,0.161306        ),
    (15,-44.0974,10.2493,0.169471        ),
    (14,-42.5618,10.898,0.169614         ),
    (13,-49.3576,14.5977,0.168686        ),
    (12,-42.6645,12.81,0.173514          ),
    (11,-38.6341,29.7455,0.193585        ),
    (10,-36.984,28.7,0.191559            ),
    (9,-37.642,28.5244,0.191978          ),
    (8,-37.6442,28.5211,0.192072         ),
    (7,-38.1045,28.6804,0.194044         ),
    (6,-35.6437,30.2341,0.191035         ),
    (5,-38.3328,31.442,0.199531          ),
    (4,-38.4354,31.9777,0.200347         ),
    (3,-39.1754,31.6586,0.199362         ),
    (2,-39.162,31.5624,0.198845          ),
    (1,-39.0534,31.6325,0.198168         )
]



# Load the rotation features from rotation files.
rotation_features = list(pygplates.FeatureCollection(rotation_filename))

# A rotation model using the rotation features before they are modified.
rotation_model = pygplates.RotationModel(rotation_features)

total_reconstruction_pole_701 = None
for rotation_feature_index, rotation_feature in enumerate(rotation_features):

    # Get the rotation feature information.
    total_reconstruction_pole = rotation_feature.get_total_reconstruction_pole()
    if not total_reconstruction_pole:
        # Not a rotation feature.
        continue

    fixed_plate_id, moving_plate_id, rotation_sequence = total_reconstruction_pole
    # We're only interested in rotation features with moving plate ID 701.
    if moving_plate_id != 701:
        continue

    total_reconstruction_pole_701 = total_reconstruction_pole
    break

if not total_reconstruction_pole_701:
    print "Rotation 701 not found."
    sys.exit(1)


pole_time_samples_701_rel_fixed = []

# Start with identity rotation at time 0Ma.
pole_time_samples_701_rel_fixed.append(
    pygplates.GpmlTimeSample(pygplates.GpmlFiniteRotation(pygplates.FiniteRotation()), 0.0, 'NNR'))

# Start with identity net rotation at time 0Ma.
net_total_rotation = pygplates.FiniteRotation()

for time, net_stage_lat, net_stage_lon, net_stage_angle_per_my in reversed(net_stage_pole_data):
    
    # Accumulate net stage rotations going backward in time (hence the inverse stage rotation)
    # since finite rotations go backward in time in the rotation file.
    net_stage_rotation = pygplates.FiniteRotation(
            pygplates.PointOnSphere(net_stage_lat, net_stage_lon),
            math.radians(net_stage_angle_per_my * net_stage_rotation_interval))
    net_total_rotation = net_stage_rotation.get_inverse() * net_total_rotation
    
    # Remove net total rotation at current time from 701 rel 001 rotation.
    no_net_rotation_701_rel_001 = net_total_rotation.get_inverse() * rotation_model.get_rotation(time, 701, fixed_plate_id=1)

    # Convert 701 rel 001 rotation to the 701 rel 'fixed_plate_id' rotation to store in rotation file.
    no_net_rotation_701_rel_fixed = rotation_model.get_rotation(time, fixed_plate_id, fixed_plate_id=1).get_inverse() * no_net_rotation_701_rel_001

    pole_time_samples_701_rel_fixed.append(
        pygplates.GpmlTimeSample(pygplates.GpmlFiniteRotation(no_net_rotation_701_rel_fixed), time, 'NNR'))

# The time samples need to be wrapped into an irregular sampling property value.
total_reconstruction_pole_701_rel_fixed = pygplates.GpmlIrregularSampling(pole_time_samples_701_rel_fixed)

# Create the total reconstruction sequence (rotation) feature.
# rotation_feature_701_rel_fixed = pygplates.Feature(pygplates.FeatureType.gpml_total_reconstruction_sequence)
# rotation_feature_701_rel_fixed.set_name('INA-AUS Muller et.al 2000')
# rotation_feature_701_rel_fixed.set_total_reconstruction_pole(701, fixed_plate_id, total_reconstruction_pole_701_rel_fixed)
rotation_feature_701_rel_fixed = pygplates.Feature.create_total_reconstruction_sequence(
    fixed_plate_id,
    701,
    total_reconstruction_pole_701_rel_fixed)

# Replace the original 701 sequence with the new NNR 701 sequence.
rotation_features[rotation_feature_index] = rotation_feature_701_rel_fixed

# Write NNR rotation file.
pygplates.FeatureCollection(rotation_features).write(nnr_rotation_filename)
